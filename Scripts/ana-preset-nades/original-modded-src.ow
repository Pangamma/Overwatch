settings
{
	main
	{
		Description: "SINGLEPLAYER ONLY. by pluzorminuz and Pangamma/Deiya Last Update: 2021-09-08"
		Mode Name: "Preset nade finder"
	}

	lobby
	{
		Match Voice Chat: Enabled
		Max Team 1 Players: 0
		Max Team 2 Players: 2
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Junkertown
			}
		}

		General
		{
			Hero Limit: Off
			Kill Feed: Off
			Limit Roles: 2 Of Each Role Per Team
			Respawn Time Scalar: 50%
		}
	}

	heroes
	{
		General
		{
			Ability Cooldown Time: 0%

			Torbjörn
			{
				Infinite Ultimate Duration: On
			}
		}
	}

	extensions
	{
		Beam Effects
		Play More Effects
	}
}

variables
{
	global:
		0: data
		1: loop_i
		2: map_deathplane_y
		3: heroList
		4: heroData
		100: _FX

	player:
		0: heroIndex
		1: heroProjData
		2: heroAbilityIcon
		3: proj_g
		4: proj_vel
		5: proj_del
		6: proj_simtime
		7: proj_r
		8: proj_castdelay
		9: proj_chasedelay
		10: proj_fx
		11: proj_warning
		12: proj_p0
		13: proj_p1
		14: proj_p2
		15: proj_apex_t
		16: isTrajHidden
		17: proj_dir
		18: abilityIndex
		19: player_hero
		20: ray_cast_t
		21: ray_cast_start
		22: ray_cast_end
		23: ray_cast_hit_pos
		24: proj_predict_land_pos
		25: proj_predict_land_t
		26: posMemory
		27: poslock_bool
		28: poslock_posfac
		29: pEyePos
		30: pFacingDirHidden
		31: chasecam_bool
		32: chasecam_t
		33: chasecam_chasing
		34: predictcam_bool
		35: predictcam_dist
		36: eye_height
		37: trajlock_bool
		38: proj_override
		39: isTrajHidden_manual
		40: isHudHidden
		41: chasecam_interrupt
		42: pFacingDir
		43: isAimEnabled
		44: aim_indicatorPos
		45: aimTargetPos
		46: aim_distToIndicator
		47: freecam_freeeye
		48: freecam_accel
		49: freecam_bool
		50: freecam_vel
		51: freecam_prevdir
		52: tumbleweed_highnoon_swag
		53: lastProjectileHitPos
		54: isTargetLocked
}

subroutines
{
	0: loadProjData
	1: calc_proj
	2: swap_proj_data
	3: init_map_deathplane_y
	4: initTrajectoryUI
	5: check_ability1
	6: initHud
	7: save_trajectory_origin
	8: chasecam_start
	9: lockpos_only
	10: lockdir_only
	11: unlockpos_only
	12: unlockdir_only
	14: init_autoaim
	15: initHeroData
}

rule("init")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		"sphere,shaft 1.053046257,ringout 1.052807897,ringin 1.062128122"
		Global._FX = Array(10155.377 / 10000, 10530.462 / 10000, 10528.079 / 10000, 10621.281 / 10000);
		Call Subroutine(initHeroData);
		// Global.data = Array(Array(Hero(Ana), Hero(Junkrat), Hero(Baptiste), Hero(Orisa), Hero(Zarya), Hero(Sombra), Hero(Ashe), Hero(
		// 	Tracer), Hero(Cassidy), Hero(Mei), Hero(Torbjörn), Hero(Hanzo), Hero(Sigma), Hero(Widowmaker)), Array(Array(Array(Null, Null,
		// 	Null, Null, Array(-9.840, 30, 0, 7, 0, 0, 0.350, False)), 4, Array(4, 0, 0), False), Array(Array(Array(-12.350, 25, 0.075, 7,
		// 	0, 0, 0.100, False), Null, Null, Array(-20.300, 25, 0.090, 7, 0, 0.136, 0.250, False), Array(-20.200, 10, 0.095, 7, 0, 0,
		// 	0.250, False)), 0, Array(2, 3, 0), True), Array(Array(Null, Array(-20.100, 60, 0.007, 7, 0, 0, 0.100, False), Null, Null,
		// 	Array(-20.100, 60, 0.007, 7, 0, 0, 0.100, False)), 1, Array(3, 0, 6.500), True), Array(Array(Null, Null, Null, Null, Array(
		// 	-9.840, 25, 0, 7, 0, 0.128, 0.400, False)), 4, Array(0, 0, 0), True), Array(Array(Null, Array(-9.840, 25, 0.100, 7, 0, 0,
		// 	0.500, False), Array(-9.840, 25, 0.100, 7, 0, 0, 0.500, False), Null, Null), 1, Array(2.500, 6, 0), False), Array(Array(Null,
		// 	Null, Null, Null, Array(-20.200, 25, 0.090, 5, 0, 0.096, 0.200, False)), 4, Array(15, 0, 0), True), Array(Array(Null, Null,
		// 	Null, Null, Array(-8.030, 25, 0.070, 7, 0, 0.140, 0.400, False)), 4, Array(5, 0, 0), True), Array(Array(Null, Null, Array(
		// 	-30.800, 15, 0.190, 2, 0, 0.144, 0.150, False), Null, Null), 2, Array(5, 0, 0), False), Array(Array(Null, Null, Array(-10,
		// 	4.200, 0.577, 4, 0, 0, 0.300, False), Null, Array(-9.840, 30, 0, 7 / 30, 0, 0, 0.100, False)), 4, Array(3, 0, 0), False),
		// 	Array(Array(Null, Null, Array(-9.900, 20, 0.090, 7, 0, 0.484, 0.600, False), Null, Null), 2, Array(10, 0, 0), False), Array(
		// 	Array(Array(-9.810, 70, 0.015, 15, 0, 0, 0.100, True), Null, Array(-30.050, 40, 0, 5, 0, 0, 0.100, True), Array(-20, 17, 0, 4,
		// 	0, 0.048, 0.100, True), Null), 0, Array(2.500, 40, 0), True), Array(Array(Array(-9.815, 110, 0, 15, 0, 0, 0.032, True), Null,
		// 	Null, Null, Array(-9.815, 110, 0, 15, 0, 0, 0.032, True)), 0, Array(0, 9, 0), False), Array(Array(Array(-5.954, 49.700, 0,
		// 	3 / 7, 0, 0, 0.048, False), Null, Null, Null, Array(-18.350, 37.400, 0.100, 6, 0, 0.640, 0.256, False)), 4, Array(2.500, 3, 0),
		// 	True), Array(Array(Null, Null, Null, Null, Array(-9.840, 20, 0, 7, 0, 0.192, 0.160, False)), 4, Array(3, 0, 0), True)));
		Call Subroutine(init_map_deathplane_y);
		Call Subroutine(initHud);
		Call Subroutine(initTrajectoryUI);
	}
}

rule("init_player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Set Player Allowed Heroes(Event Player, Global.heroList);
		Event Player.isTrajHidden = False;
		Disable Game Mode HUD(Event Player);
		disabled Event Player.isAimEnabled = True;
		Call Subroutine(init_autoaim);
	}
}

rule("player_calc_proj_loop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.chasecam_chasing != True;
		Event Player.trajlock_bool != True;
		Event Player.freecam_bool != True;
	}

	actions
	{
		Call Subroutine(save_trajectory_origin);
		Call Subroutine(calc_proj);
		Wait(0.064, Abort When False);
		Loop If Condition Is True;
	}
}

rule("player_changed_hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Event Player.player_hero;
	}

	actions
	{
		Event Player.player_hero = Hero Of(Event Player);
		Event Player.eye_height = Eye Position(Event Player) - Position Of(Event Player);
		Call Subroutine(loadProjData);
		Event Player.heroAbilityIcon = Custom String("{0}{1}{2}", Event Player.heroProjData[0] != Null ? Ability Icon String(Hero Of(
			Event Player), Button(Primary Fire)) : Custom String(""), Event Player.heroProjData[1] != Null ? Ability Icon String(Hero Of(
			Event Player), Button(Secondary Fire)) : Custom String(""), Custom String("{0}{1}{2}",
			Event Player.heroProjData[2] != Null ? Ability Icon String(Hero Of(Event Player), Button(Ultimate)) : Custom String(""),
			Event Player.heroProjData[3] != Null ? Ability Icon String(Hero Of(Event Player), Button(Ability 1)) : Custom String(""),
			Event Player.heroProjData[4] != Null ? Ability Icon String(Hero Of(Event Player), Button(Ability 2)) : Custom String("")));
		Set Ultimate Charge(Event Player, 100);
		If(Event Player.posMemory != 0);
			Teleport(Event Player, Event Player.posMemory[0]);
			Set Facing(Event Player, Event Player.posMemory[1], To World);
		End;
		Event Player.predictcam_dist = 0.800;
		Event Player.predictcam_bool = False;
		Event Player.isTrajHidden = False;
		Event Player.tumbleweed_highnoon_swag = False;
		If(Event Player.chasecam_chasing == True);
			Start Rule(chasecam_start, Restart Rule);
		End;
	}
}

rule("player_action_change_hero (acknowledge)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Acknowledge) == True;
	}

	actions
	{
		Event Player.posMemory = Array(Position Of(Event Player), Facing Direction Of(Event Player));
		Set Player Allowed Heroes(Event Player, Filtered Array(All Heroes, Current Array Element != Hero Of(Event Player)));
		Set Player Allowed Heroes(Event Player, Global.heroList);
	}
}

rule("player_action_refill_ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("player_action_zoomout (jump)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.poslock_bool == True;
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Event Player.predictcam_dist = Max(Event Player.predictcam_dist + -0.003, 0);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("player_action_zoomin (duck)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.poslock_bool == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Event Player.predictcam_dist = Min(Event Player.predictcam_dist + 0.003, 1);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("player_action_predictcam (melee)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Event Player.freecam_bool != True;
	}

	actions
	{
		If(Event Player.chasecam_chasing == False);
			Event Player.predictcam_bool = !Event Player.predictcam_bool;
		Else;
			Event Player.chasecam_interrupt = True;
			Start Rule(chasecam_start, Restart Rule);
		End;
	}
}

rule("predictcam_toggle_on")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.predictcam_bool == True;
	}

	actions
	{
		"?? cam"
		disabled Start Camera(Event Player, Min(1, 1 - Event Player.proj_predict_land_t + Event Player.predictcam_dist)
			^ 2 * Event Player.proj_p0 + 2 * Min(1, 1 - Event Player.proj_predict_land_t + Event Player.predictcam_dist) * Max(0,
			Event Player.proj_predict_land_t - Event Player.predictcam_dist) * Event Player.proj_p1 + Max(0,
			Event Player.proj_predict_land_t - Event Player.predictcam_dist) ^ 2 * Event Player.proj_p2,
			Event Player.proj_predict_land_pos, 10);
		"final cam"
		Start Camera(Event Player, (1 - Event Player.proj_predict_land_t * Event Player.predictcam_dist) ^ 2 * Event Player.proj_p0 + 2 * (
			1 - Event Player.proj_predict_land_t * Event Player.predictcam_dist)
			* Event Player.proj_predict_land_t * Event Player.predictcam_dist * Event Player.proj_p1 + (
			Event Player.proj_predict_land_t * Event Player.predictcam_dist) ^ 2 * Event Player.proj_p2,
			Event Player.proj_predict_land_pos, 10);
		"apex cam"
		disabled Start Camera(Event Player, (1 - Event Player.proj_apex_t) ^ 2 * Event Player.proj_p0 + 2 * (1 - Event Player.proj_apex_t)
			* Event Player.proj_apex_t * Event Player.proj_p1 + Event Player.proj_apex_t ^ 2 * Event Player.proj_p2 + Vector(0.800, 0, 0),
			(1 - Event Player.proj_apex_t) ^ 2 * Event Player.proj_p0 + 2 * (1 - Event Player.proj_apex_t)
			* Event Player.proj_apex_t * Event Player.proj_p1 + Event Player.proj_apex_t ^ 2 * Event Player.proj_p2, 0);
		disabled Set Slow Motion(10);
	}
}

rule("predictcam_toggle_off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.predictcam_bool == False;
	}

	actions
	{
		Stop Camera(Event Player);
		disabled Set Slow Motion(100);
	}
}

rule("player_action_chasecam (ult status)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Ultimate Status) == True;
	}

	actions
	{
		Event Player.chasecam_bool = !Event Player.chasecam_bool;
	}
}

rule("player_action_trajlock (interact)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Event Player.trajlock_bool = !Event Player.trajlock_bool;
	}
}

rule("player_auto_aim (hello)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Hello) == True;
		disabled Event Player.trajlock_bool == True;
	}

	actions
	{
		disabled Event Player.isAimEnabled = !Event Player.isAimEnabled;
		Event Player.aimTargetPos = Event Player.proj_predict_land_pos;
		Big Message(All Players(All Teams), Custom String("Aim target has been set!"));
		Event Player.isAimEnabled = True;
	}
}

rule("player_action_trajhide (group up)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Group Up) == True;
	}

	actions
	{
		Event Player.isTrajHidden_manual = !Event Player.isTrajHidden_manual;
	}
}

rule("player_action_lockpos (reload)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		Event Player.poslock_bool = !Event Player.poslock_bool;
	}
}

rule("lockpos_only_toggle_on")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		((!Event Player.poslock_bool && Event Player.freecam_bool) || (Event Player.poslock_bool && !Event Player.freecam_bool)) == True;
	}

	actions
	{
		Call Subroutine(lockpos_only);
	}
}

rule("lockpos_only_toggle_off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		!((!Event Player.poslock_bool && Event Player.freecam_bool) || (Event Player.poslock_bool && !Event Player.freecam_bool)) == True;
	}

	actions
	{
		Call Subroutine(unlockpos_only);
	}
}

rule("lockdir_only_toggle_on")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.poslock_bool && !Event Player.freecam_bool) == True;
	}

	actions
	{
		Call Subroutine(lockdir_only);
	}
}

rule("lockdir_only_toggle_off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		!(Event Player.poslock_bool && !Event Player.freecam_bool) == True;
	}

	actions
	{
		Call Subroutine(unlockdir_only);
	}
}

rule("[sub] lockpos_only")
{
	event
	{
		Subroutine;
		lockpos_only;
	}

	actions
	{
		Disable Movement Collision With Environment(Event Player, True);
		Event Player.poslock_posfac[0] = Eye Position(Event Player) - Event Player.eye_height;
		Start Forcing Player Position(Event Player, Event Player.poslock_posfac[0], False);
	}
}

rule("[sub] unlockpos_only")
{
	event
	{
		Subroutine;
		unlockpos_only;
	}

	actions
	{
		Enable Movement Collision With Environment(Event Player);
		Stop Forcing Player Position(Event Player);
	}
}

rule("[sub] lockdir_only")
{
	event
	{
		Subroutine;
		lockdir_only;
	}

	actions
	{
		Event Player.poslock_posfac[1] = Facing Direction Of(Event Player);
		Start Facing(Event Player, Event Player.poslock_posfac[1], 10000, To World, None);
	}
}

rule("[sub] unlockdir_only")
{
	event
	{
		Subroutine;
		unlockdir_only;
	}

	actions
	{
		If(Event Player.freecam_bool);
			Stop Facing(Event Player);
			Set Facing(Event Player, Event Player.poslock_posfac[1], To World);
		Else;
			Stop Facing(Event Player);
		End;
	}
}

rule("check_using_primary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.proj_override == False;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		"immediately snap the starting pos and fac"
		Call Subroutine(save_trajectory_origin);
		Event Player.abilityIndex = 0;
		If(Event Player.heroProjData[Event Player.abilityIndex] != Null);
			Call Subroutine(swap_proj_data);
			If((Event Player.chasecam_bool || Event Player.trajlock_bool) && !Event Player.chasecam_chasing);
				Start Rule(chasecam_start, Restart Rule);
			End;
		End;
	}
}

rule("check_using_secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Is Firing Secondary(Event Player) == True;
		Event Player.proj_override == False;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		"immediately snap the starting pos and fac"
		Call Subroutine(save_trajectory_origin);
		Event Player.abilityIndex = 1;
		If(Event Player.heroProjData[Event Player.abilityIndex] != Null);
			Call Subroutine(swap_proj_data);
			If((Event Player.chasecam_bool || Event Player.trajlock_bool) && !Event Player.chasecam_chasing);
				Start Rule(chasecam_start, Restart Rule);
			End;
		End;
	}
}

rule("check_using_ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Is Using Ultimate(Event Player) == True;
		Event Player.proj_override == False;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		"immediately snap the starting pos and fac"
		Call Subroutine(save_trajectory_origin);
		Event Player.abilityIndex = 2;
		If(Event Player.heroProjData[Event Player.abilityIndex] != Null);
			Call Subroutine(swap_proj_data);
			If((Event Player.chasecam_bool || Event Player.trajlock_bool) && !Event Player.chasecam_chasing);
				Start Rule(chasecam_start, Restart Rule);
			End;
		End;
	}
}

rule("check_abilityIndex_1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Is Using Ability 1(Event Player) == True;
		Event Player.proj_override == False;
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		"immediately snap the starting pos and fac"
		Call Subroutine(save_trajectory_origin);
		Event Player.abilityIndex = 3;
		If(Event Player.heroProjData[Event Player.abilityIndex] != Null);
			Call Subroutine(swap_proj_data);
			If((Event Player.chasecam_bool || Event Player.trajlock_bool) && !Event Player.chasecam_chasing);
				Start Rule(chasecam_start, Restart Rule);
			End;
		End;
	}
}

rule("check_abilityIndex_2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Is Using Ability 2(Event Player) == True;
		Event Player.proj_override == False;
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
		"immediately snap the starting pos and fac"
		Call Subroutine(save_trajectory_origin);
		Event Player.abilityIndex = 4;
		If(Event Player.heroProjData[Event Player.abilityIndex] != Null);
			Call Subroutine(swap_proj_data);
			If((Event Player.chasecam_bool || Event Player.trajlock_bool) && !Event Player.chasecam_chasing);
				Start Rule(chasecam_start, Restart Rule);
			End;
		End;
	}
}

rule("Hanzo: Primary Fire Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Using Ability 2(Event Player) != True;
	}

	actions
	{
		Event Player.proj_vel = 25;
		Chase Player Variable At Rate(Event Player, proj_vel, 110, 120, None);
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)) == False, 99999);
		"immediately snap the starting pos and fac"
		Call Subroutine(save_trajectory_origin);
		Stop Chasing Player Variable(Event Player, proj_vel);
		If((Event Player.chasecam_bool || Event Player.trajlock_bool) && !Event Player.chasecam_chasing);
			Start Rule(chasecam_start, Restart Rule);
		End;
	}
}

rule("Hanzo: Using Storm Arrow")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		If(Event Player.chasecam_chasing != True);
			Event Player.proj_vel = 110;
		End;
	}
}

rule("Hanzo: Fire Storm Arrow")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.chasecam_bool == True;
		Event Player.chasecam_chasing == False;
	}

	actions
	{
		"immediately snap the starting pos and fac"
		Call Subroutine(save_trajectory_origin);
		If((Event Player.chasecam_bool || Event Player.trajlock_bool) && !Event Player.chasecam_chasing);
			Start Rule(chasecam_start, Restart Rule);
		End;
	}
}

rule("Torbjorn: Using Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		If(Event Player.chasecam_chasing != True);
			Event Player.abilityIndex = 2;
			Call Subroutine(swap_proj_data);
		End;
	}
}

rule("Torbjorn: Rivet")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Using Ultimate(Event Player) != True;
	}

	actions
	{
		"immediately snap the starting pos and fac"
		Call Subroutine(save_trajectory_origin);
		If(Event Player.chasecam_chasing != True);
			Event Player.abilityIndex = 0;
			Call Subroutine(swap_proj_data);
		End;
		If((Event Player.chasecam_bool || Event Player.trajlock_bool) && !Event Player.chasecam_chasing);
			Start Rule(chasecam_start, Restart Rule);
		End;
	}
}

rule("Torbjorn: Firing Goo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		"immediately snap the starting pos and fac"
		Call Subroutine(save_trajectory_origin);
		If((Event Player.chasecam_bool || Event Player.trajlock_bool) && !Event Player.chasecam_chasing);
			Start Rule(chasecam_start, Restart Rule);
		End;
	}
}

rule("Torbjorn: Deploy Turret")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	conditions
	{
		Is Using Ultimate(Event Player) != True;
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		"immediately snap the starting pos and fac"
		Call Subroutine(save_trajectory_origin);
		If(Event Player.chasecam_chasing != True);
			Event Player.abilityIndex = 3;
			Call Subroutine(swap_proj_data);
		End;
		If((Event Player.chasecam_bool || Event Player.trajlock_bool) && !Event Player.chasecam_chasing);
			Start Rule(chasecam_start, Restart Rule);
		End;
	}
}

rule("[sub] chasecam_start")
{
	event
	{
		Subroutine;
		chasecam_start;
	}

	actions
	{
		If(!(Event Player.chasecam_chasing || Event Player.chasecam_interrupt));
			Stop Chasing Player Variable(Event Player, chasecam_t);
			Event Player.chasecam_t = 0;
			"then wait for the cast time if any"
			If(Event Player.proj_castdelay > 0);
				Wait(Event Player.proj_castdelay, Ignore Condition);
				Call Subroutine(save_trajectory_origin);
			End;
			"do calc"
			Start Rule(calc_proj, Restart Rule);
			"start chasing immediately after casting"
			Chase Player Variable At Rate(Event Player, chasecam_t, Event Player.proj_predict_land_t, 1 / Event Player.proj_simtime,
				Destination and Rate);
			If(Event Player.chasecam_bool && !Event Player.freecam_bool);
				Event Player.predictcam_bool = False;
				Event Player.chasecam_chasing = True;
				Event Player.isTrajHidden = True;
				Set Invisible(Event Player, All);
				"ensures projectile correction"
				Wait(0.016, Ignore Condition);
				"start camera"
				Start Camera(Event Player, Min(1 - Event Player.chasecam_t + Event Player.proj_chasedelay / Event Player.proj_simtime, 1)
					^ 2 * Event Player.proj_p0 + 2 * Min(1 - Event Player.chasecam_t + Event Player.proj_chasedelay / Event Player.proj_simtime, 1)
					* Max(Event Player.chasecam_t - Event Player.proj_chasedelay / Event Player.proj_simtime, 0) * Event Player.proj_p1 + Max(
					Event Player.chasecam_t - Event Player.proj_chasedelay / Event Player.proj_simtime, 0) ^ 2 * Event Player.proj_p2 - (
					Event Player.proj_dir == Up || Event Player.proj_dir == Down) * 0.008 * Direction From Angles(Horizontal Angle From Direction(
					Event Player.pFacingDir), 0), (1 - Event Player.chasecam_t) ^ 2 * Event Player.proj_p0 + 2 * (
					1 - Event Player.chasecam_t)
					* Event Player.chasecam_t * Event Player.proj_p1 + Event Player.chasecam_t ^ 2 * Event Player.proj_p2, 0);
			End;
			"wait for proj to hit"
			Wait(Event Player.proj_predict_land_t * Event Player.proj_simtime + Event Player.proj_chasedelay + 1.500 - 0.016,
				Abort When False);
		End;
		If(Event Player.chasecam_chasing);
			Stop Camera(Event Player);
		End;
		Set Invisible(Event Player, None);
		Event Player.isTrajHidden = False;
		Event Player.chasecam_interrupt = False;
		Stop Chasing Player Variable(Event Player, chasecam_t);
		Event Player.chasecam_t = 0;
		Event Player.chasecam_chasing = False;
	}
}

rule("[sub] swap_projectile_data")
{
	event
	{
		Subroutine;
		swap_proj_data;
	}

	actions
	{
		Event Player.proj_g = Event Player.heroProjData[Event Player.abilityIndex][0];
		Event Player.proj_vel = Event Player.heroProjData[Event Player.abilityIndex][1];
		Event Player.proj_del = Event Player.heroProjData[Event Player.abilityIndex][2];
		Event Player.proj_simtime = Event Player.heroProjData[Event Player.abilityIndex][3];
		Event Player.proj_r = Event Player.heroProjData[Event Player.abilityIndex][4];
		Event Player.proj_castdelay = Event Player.heroProjData[Event Player.abilityIndex][5];
		Event Player.proj_chasedelay = Event Player.heroProjData[Event Player.abilityIndex][6];
		Event Player.proj_override = Event Player.heroProjData[Event Player.abilityIndex][7];
	}
}

rule("[sub] obsolete")
{
	event
	{
		Subroutine;
		check_ability1;
	}

	actions
	{
		If(Event Player.heroProjData[2] != Null);
			While(True);
				Wait Until(!Is Using Ability 1(Event Player), 99999);
				Wait Until(Is Using Ability 1(Event Player), 99999);
				Small Message(All Players(All Teams), Custom String("This ability is open for chase"));
			End;
		End;
	}
}

rule("[sub] map_deathplane")
{
	event
	{
		Subroutine;
		init_map_deathplane_y;
	}

	actions
	{
		If(Current Map == Map(Blizzard World));
			Global.map_deathplane_y = -6.490;
		Else If(Current Map == Map(Blizzard World Winter));
			Global.map_deathplane_y = -6.490;
		Else If(Current Map == Map(Dorado));
			Global.map_deathplane_y = -9.510;
		Else If(Current Map == Map(Eichenwalde));
			Global.map_deathplane_y = -7.720;
		Else If(Current Map == Map(Eichenwalde Halloween));
			Global.map_deathplane_y = -7.710;
		Else If(Current Map == Map(Hanamura));
			Global.map_deathplane_y = -8.510;
		Else If(Current Map == Map(Hanamura Winter));
			Global.map_deathplane_y = -8.500;
		Else If(Current Map == Map(Havana));
			Global.map_deathplane_y = -8.500;
		Else If(Current Map == Map(Hollywood));
			Global.map_deathplane_y = -30.510;
		Else If(Current Map == Map(Hollywood Halloween));
			Global.map_deathplane_y = -30.500;
		Else If(Current Map == Map(Horizon Lunar Colony));
			Global.map_deathplane_y = 0.410;
		Else If(Current Map == Map(Junkertown));
			Global.map_deathplane_y = -5.500;
		Else If(Current Map == Map(King's Row));
			Global.map_deathplane_y = -18.500;
		Else If(Current Map == Map(King's Row Winter));
			Global.map_deathplane_y = -18.500;
		Else If(Current Map == Map(Numbani));
			Global.map_deathplane_y = -10.500;
		Else If(Current Map == Map(Paris));
			Global.map_deathplane_y = 6.150;
		Else If(Current Map == Map(Rialto));
			Global.map_deathplane_y = -15.500;
		Else If(Current Map == Map(Route 66));
			Global.map_deathplane_y = -15.500;
		Else If(Current Map == Map(Temple of Anubis));
			Global.map_deathplane_y = -10.500;
		Else If(Current Map == Map(Volskaya Industries));
			Global.map_deathplane_y = -12.500;
		Else If(Current Map == Map(Watchpoint: Gibraltar));
			Global.map_deathplane_y = -18.500;
		Else If(Current Map == Map(Busan));
			If(Objective Index == 0);
				Global.map_deathplane_y = 0.410;
			Else If(Objective Index == 1);
				Global.map_deathplane_y = 2.020;
			Else If(Objective Index == 2);
				Global.map_deathplane_y = -8.500;
			End;
		Else If(Current Map == Map(Ilios));
			If(Objective Index == 0);
				Global.map_deathplane_y = -37.450;
			Else If(Objective Index == 1);
				Global.map_deathplane_y = -10.190;
			Else If(Objective Index == 2);
				Global.map_deathplane_y = 49.360;
			End;
		Else If(Current Map == Map(Nepal));
			If(Objective Index == 0);
				Global.map_deathplane_y = -106.180;
			Else If(Objective Index == 1);
				Global.map_deathplane_y = 0.840;
			Else If(Objective Index == 2);
				Global.map_deathplane_y = 115.150;
			End;
		Else If(Current Map == Map(Oasis));
			If(Objective Index == 0);
				Global.map_deathplane_y = -8.990;
			Else If(Objective Index == 1);
				Global.map_deathplane_y = -0.510;
			Else If(Objective Index == 2);
				Global.map_deathplane_y = 2.080;
			End;
		Else If(Current Map == Map(Lijiang Tower));
			If(Objective Index == 0);
				Global.map_deathplane_y = -12.510;
			Else If(Objective Index == 1);
				Global.map_deathplane_y = 82.570;
			Else If(Objective Index == 2);
				Global.map_deathplane_y = 250.200;
			End;
		Else If(Current Map == Map(Lijiang Tower Lunar New Year));
			If(Objective Index == 0);
				Global.map_deathplane_y = -12.510;
			Else If(Objective Index == 1);
				Global.map_deathplane_y = 82.570;
			Else If(Objective Index == 2);
				Global.map_deathplane_y = 250.200;
			End;
		Else If(Current Map == Map(Workshop Chamber));
			Global.map_deathplane_y = -25.500;
		Else If(Current Map == Map(Workshop Expanse));
			Global.map_deathplane_y = -27;
		Else If(Current Map == Map(Workshop Expanse Night));
			Global.map_deathplane_y = -27;
		Else If(Current Map == Map(Workshop Green Screen));
			Global.map_deathplane_y = -27;
		Else If(Current Map == Map(Workshop Island));
			Global.map_deathplane_y = -27;
		Else If(Current Map == Map(Workshop Island Night));
			Global.map_deathplane_y = -27;
		End;
	}
}

rule("[sub] create trajectory")
{
	event
	{
		Subroutine;
		initTrajectoryUI;
	}

	actions
	{
		For Global Variable(loop_i, 0, 1, 0.020);
			"main trajectory"
			Create Beam Effect(Local Player.isTrajHidden != True && Local Player.isTrajHidden_manual != True ? Local Player : Null,
				Torbjörn Turret Sight Beam, Evaluate Once((0.980 - Global.loop_i) * (0.980 - Global.loop_i))
				* Local Player.proj_p0 + Evaluate Once(2 * (Global.loop_i + 0.020) * (0.980 - Global.loop_i))
				* Local Player.proj_p1 + Evaluate Once((Global.loop_i + 0.020) * (Global.loop_i + 0.020)) * Local Player.proj_p2,
				Evaluate Once((1 - Global.loop_i) * (1 - Global.loop_i)) * Local Player.proj_p0 + Evaluate Once(2 * Global.loop_i * (
				1 - Global.loop_i)) * Local Player.proj_p1 + Evaluate Once(Global.loop_i * Global.loop_i) * Local Player.proj_p2, Color(
				Team 1), Visible To Position and Radius);
			Wait(0.016, Ignore Condition);
		End;
		"hit position marker"
		Create Effect(Local Player.isTrajHidden_manual ? Null : Local Player, Sphere, Color(Red), Local Player.proj_predict_land_pos,
			0.200 * Evaluate Once(Global._FX[0]), Visible To Position and Radius);
		"apex"
		disabled Create Effect(Local Player.isTrajHidden_manual ? Null : Local Player, Sphere, Color(Green), (1 - Local Player.proj_apex_t)
			^ 2 * Local Player.proj_p0 + 2 * (1 - Local Player.proj_apex_t)
			* Local Player.proj_apex_t * Local Player.proj_p1 + Local Player.proj_apex_t ^ 2 * Local Player.proj_p2, 0.200 * Evaluate Once(
			Global._FX[0]), Visible To Position and Radius);
		"proj collision size"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Yellow), Local Player.proj_predict_land_pos,
			Local Player.proj_r * Evaluate Once(Global._FX[0]), Visible To Position and Radius);
		"spherecast progress size"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Yellow), Local Player.ray_cast_start, Local Player.proj_r * Evaluate Once(
			Global._FX[0]), Visible To Position and Radius);
		"primary range"
		Create Effect(Local Player.isTrajHidden_manual ? Null : Local Player, Sphere, Color(Sky Blue),
			Local Player.proj_predict_land_pos, Local Player.proj_fx[0] * Evaluate Once(Global._FX[0]), Visible To Position and Radius);
		"secondary range"
		Create Effect(Local Player.isTrajHidden_manual ? Null : Local Player, Sphere, Color(Blue), Local Player.proj_predict_land_pos,
			Local Player.proj_fx[1] * Evaluate Once(Global._FX[0]), Visible To Position and Radius);
		"cylinder range"
		Create Effect(Local Player.isTrajHidden_manual ? Null : Local Player, Light Shaft, Color(Blue),
			Local Player.proj_predict_land_pos, Local Player.proj_fx[2] * Evaluate Once(Global._FX[1]), Visible To Position and Radius);
		"cylinder range (ring)"
		Create Effect(Local Player.isTrajHidden_manual ? Null : Local Player, Ring, Color(Blue), Local Player.proj_predict_land_pos,
			Local Player.proj_fx[2] * Evaluate Once(Global._FX[2]), Visible To Position and Radius);
	}
}

rule("[sub] final hud")
{
	event
	{
		Subroutine;
		initHud;
	}

	actions
	{
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Custom String("Code: XWAGN"), Custom String(
			"Improved Nade Tool (v2.3.3.210419)"), Custom String("by pluzorminuz"), Left, -2, Color(Yellow), Color(White), Color(Aqua),
			Visible To, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Local Player : Null, Null, Null, Custom String("XWAGN v2.3.3.210419"), Left, -2, Color(
			White), Color(White), Color(Yellow), Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, String("{0} - {1}", Entity Count, Text Count), String("{0} - {1} - {2}", Server Load,
			Server Load Average, Server Load Peak), Right, -1, Color(White), Color(Gray), Color(Gray), Visible To and String,
			Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Custom String("Instructions"), Null, Null, Left, 0, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, Custom String("Ultimate Status"), Custom String(
			"- toggle chase camera"), Left, 0.050, Color(White), Color(Blue), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, String("{0} {1}", Button(Melee), String("({0})",
			Input Binding String(Button(Melee)))), Local Player.chasecam_chasing ? Custom String("- cancel chase cam in-progress")
			: Custom String("- toggle landing spot view"), Left, 0.100, Color(White), Color(Green), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, String("{0} {1}", Button(Reload), String("({0})",
			Input Binding String(Button(Reload)))), Local Player.freecam_bool ? Custom String("- lock freecam") : Custom String(
			"- lock position and view"), Left, 0.200, Color(White), Color(Red), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, String("{0} and {1}", String("{0} {1}", Button(Jump),
			String("({0})", Input Binding String(Button(Jump)))), String("{0} {1}", Button(Crouch), String("({0})", Input Binding String(
			Button(Crouch))))), Custom String("- zoom out or in while locked and in landing spot view"), Left, 0.250, Color(White), Color(
			Yellow), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, String("{0} {1}", Button(Interact), String("({0})",
			Input Binding String(Button(Interact)))), Custom String("- toggle trajectory auto-lock"), Left, 0.300, Color(White), Color(
			Aqua), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, Custom String("Acknowledge"), Custom String(
			"- change hero"), Left, 0.400, Color(White), Color(Turquoise), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, Custom String("Group Up"), Custom String(
			"- [{0}] hide trajectory / effects", Local Player.isTrajHidden_manual ? Custom String("Hidden") : Custom String(
			"Visible")), Left, 0.500, Color(White), Color(Lime Green), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, Custom String("Thanks"), Custom String("- Toggle Freecam"),
			Left, 0.600, Color(White), Color(Yellow), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("Need Healing"), Custom String("- [{0}] Toggle HUD",
			Local Player.isHudHidden ? Custom String("Hidden") : Custom String("Visible")), Left, 0.700, Color(White), Color(Gray), Color(
			White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Custom String("Stats"), Null, Null, Left, 3, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, Custom String("Flight Time (Approx)"),
			Local Player.proj_simtime * Local Player.proj_predict_land_t, Left, 3.050, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, Custom String("Position"), Position Of(Local Player), Left,
			3.100, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, Custom String("Angles (Horz, Vert)"), String("{0}, {1}",
			Horizontal Facing Angle Of(Local Player), Vertical Facing Angle Of(Local Player)), Left, 3.200, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, Custom String("Proj Dir"), Normalize(Vector Towards((
			1 - Local Player.chasecam_t) * Local Player.proj_p0 + Local Player.chasecam_t * Local Player.proj_p1, (
			1 - Local Player.chasecam_t) * Local Player.proj_p1 + Local Player.chasecam_t * Local Player.proj_p2)), Left, 100, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		"B'(t) definition"
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, Custom String("Proj Speed"), Distance Between(2 * (
			1 - Local Player.chasecam_t) * (Local Player.proj_p1 - Local Player.proj_p0) + 2 * Local Player.chasecam_t * (
			Local Player.proj_p2 - Local Player.proj_p1), Vector(0, 0, 0)) / Local Player.proj_simtime, Left, 100.100, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.isHudHidden ? Null : Local Player, Null, Custom String("land_pos_t / ray_cast_t"), String("{0}, {1}",
			Local Player.proj_predict_land_t, Local Player.ray_cast_t), Left, 101, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Local Player.trajlock_bool ? Local Player : Null, Custom String("Trajectory Auto-Lock ON"), Null, Null, Top, 1,
			Color(Aqua), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.trajlock_bool && Local Player.isAimEnabled ? Local Player : Null, Custom String("Auto Aim ON"), Null,
			Null, Top, 1, Color(Aqua), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.poslock_bool ? Local Player : Null, Local Player.freecam_bool ? Custom String(
			"Freecam View Locked. You can now activate your abilities.") : Custom String("LOCK ENGAGED! {0}: Zoom Out, {1}: Zoom In",
			Input Binding String(Button(Jump)), Input Binding String(Button(Crouch))), Null, Null, Top, 2, Color(Red), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.chasecam_bool ? Local Player : Null, Custom String(
			"Chase Camera On. Activate Ability ({0}) to start camera.", Local Player.heroAbilityIcon), Null, Null, Top, 3, Color(Blue),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Local Player.proj_warning ? Local Player : Null, Custom String(
			"NON-ZERO PROJECTILE RADIUS. TRAJECTORY MAY NOT MATCH"), Null, Null, Top, 4, Color(Red), Color(White), Color(White),
			Visible To, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), Local Player.proj_override, Null, Null, Right, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), Local Player.proj_override, Null, Null, Right, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
	}
}

rule("[sub] loadProjData")
{
	event
	{
		Subroutine;
		loadProjData;
	}

	actions
	{
		Event Player.heroIndex = Index Of Array Value(Global.heroList, Hero Of(Event Player));
		Event Player.heroProjData = Global.heroData[Event Player.heroIndex][0];
		Event Player.proj_fx = Global.heroData[Event Player.heroIndex][2];
		Event Player.proj_warning = Global.heroData[Event Player.heroIndex][3];
		Event Player.abilityIndex = Global.heroData[Event Player.heroIndex][1];
		Call Subroutine(swap_proj_data);
		disabled Event Player.proj_g = Event Player.heroProjData[Global.heroData[Event Player.heroIndex][1]][0];
		disabled Event Player.proj_vel = Event Player.heroProjData[Global.heroData[Event Player.heroIndex][1]][1];
		disabled Event Player.proj_del = Event Player.heroProjData[Global.heroData[Event Player.heroIndex][1]][2];
		disabled Event Player.proj_simtime = Event Player.heroProjData[Global.heroData[Event Player.heroIndex][1]][3];
		disabled Event Player.proj_r = Event Player.heroProjData[Global.heroData[Event Player.heroIndex][1]][4];
		disabled Event Player.proj_castdelay = Event Player.heroProjData[Global.heroData[Event Player.heroIndex][1]][5];
		disabled Event Player.proj_chasedelay = Event Player.heroProjData[Global.heroData[Event Player.heroIndex][1]][6];
	}
}

rule("[sub] save_eye_and_fac")
{
	event
	{
		Subroutine;
		save_trajectory_origin;
	}

	actions
	{
		If(Event Player.tumbleweed_highnoon_swag);
			Event Player.pEyePos = World Vector Of(Vector(6.595, 0.430, 3), Event Player, Rotation And Translation);
			Event Player.pFacingDir = Facing Direction Of(Event Player);
			Event Player.pFacingDirHidden = Normalize(World Vector Of(Right, Event Player, Rotation) + Event Player.proj_del * Up);
		Else;
			Event Player.pEyePos = Eye Position(Event Player);
			Event Player.pFacingDir = Facing Direction Of(Event Player);
			Event Player.pFacingDirHidden = Vertical Facing Angle Of(Event Player) < -89 ? Up : (Vertical Facing Angle Of(Event Player)
				> 89 ? Down : Normalize(Facing Direction Of(Event Player) + Event Player.proj_del * Up));
		End;
	}
}

rule("[sub] calculate_projectile_parameters    (calc_proj)")
{
	event
	{
		Subroutine;
		calc_proj;
	}

	actions
	{
		Event Player.proj_p0 = Event Player.pEyePos;
		Event Player.proj_dir = Event Player.pFacingDirHidden;
		Event Player.proj_p1 = Event Player.proj_p0 + 0.500 * Event Player.proj_vel * Event Player.proj_simtime * Event Player.proj_dir;
		Event Player.proj_p2 = Event Player.proj_p0 + Event Player.proj_vel * Event Player.proj_simtime * Event Player.proj_dir + 0.500 * Event Player.proj_simtime * Event Player.proj_simtime * Event Player.proj_g * Up;
		Event Player.proj_apex_t = -1 * Y Component Of(Event Player.proj_dir)
			* Event Player.proj_vel / Event Player.proj_g / Event Player.proj_simtime;
		If(Host Player == Event Player);
			If(Event Player.proj_r == 0);
				For Player Variable(Event Player, ray_cast_t, 0, 1, 0.002);
					Event Player.ray_cast_start = Evaluate Once((1 - Event Player.ray_cast_t) * (1 - Event Player.ray_cast_t))
						* Event Player.proj_p0 + Evaluate Once(2 * (1 - Event Player.ray_cast_t) * Event Player.ray_cast_t)
						* Event Player.proj_p1 + Evaluate Once(Event Player.ray_cast_t * Event Player.ray_cast_t) * Event Player.proj_p2;
					If(Y Component Of(Event Player.ray_cast_start) < Global.map_deathplane_y);
						Break;
					End;
					Event Player.ray_cast_end = Evaluate Once((0.998 - Event Player.ray_cast_t) * (0.998 - Event Player.ray_cast_t))
						* Event Player.proj_p0 + Evaluate Once(2 * (0.998 - Event Player.ray_cast_t) * (Event Player.ray_cast_t + 0.002))
						* Event Player.proj_p1 + Evaluate Once((Event Player.ray_cast_t + 0.002) * (Event Player.ray_cast_t + 0.002))
						* Event Player.proj_p2;
					Event Player.ray_cast_hit_pos = Ray Cast Hit Position(Event Player.ray_cast_start, Event Player.ray_cast_end, Null, Event Player,
						True);
					"hit something"
					If(Event Player.ray_cast_hit_pos != Event Player.ray_cast_end);
						Break;
					End;
				End;
				"adjustment term"
				Event Player.proj_predict_land_t = Event Player.ray_cast_t + 0.002 * (Distance Between(Event Player.ray_cast_start,
					Event Player.ray_cast_hit_pos) / Distance Between(Event Player.ray_cast_start, Event Player.ray_cast_end));
				Event Player.proj_predict_land_pos = Event Player.ray_cast_hit_pos;
				Wait(0.064, Ignore Condition);
			Else;
				Wait(0.016, Ignore Condition);
			End;
		End;
	}
}

rule("hudhide (need healing)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Need Healing) == True;
	}

	actions
	{
		Event Player.isHudHidden = !Event Player.isHudHidden;
	}
}

rule("freecam_toggle")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Thanks) == True;
	}

	actions
	{
		Event Player.freecam_bool = !Event Player.freecam_bool;
	}
}

rule("freecam_movement_loop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.freecam_bool == True;
	}

	actions
	{
		If(Event Player.poslock_bool);
			Event Player.freecam_accel = Vector(0, 0, 0);
		Else;
			"get controls"
			Event Player.freecam_accel = Throttle Of(Event Player) + Up * Is Button Held(Event Player, Button(Jump)) + Down * Is Button Held(
				Event Player, Button(Crouch));
		End;
		"normalize if non-zero vector"
		If(Event Player.freecam_accel != Vector(0, 0, 0));
			Event Player.freecam_accel = Normalize(Event Player.freecam_accel);
			"transform the accel to local space"
			Event Player.freecam_accel = X Component Of(Event Player.freecam_accel) * World Vector Of(Left, Event Player, Rotation)
				+ Y Component Of(Event Player.freecam_accel) * Direction From Angles(Horizontal Facing Angle Of(Event Player),
				Vertical Facing Angle Of(Event Player) - 90) + Z Component Of(Event Player.freecam_accel) * Facing Direction Of(Event Player);
			"add accel to vel"
			Event Player.freecam_vel += 0.090 * Event Player.freecam_accel;
			"if norm(vel) > 1"
			If(Distance Between(Vector(0, 0, 0), Event Player.freecam_vel) > 1);
				Event Player.freecam_vel = Normalize(Event Player.freecam_vel);
			End;
		"no accel, decel"
		Else;
			If(Distance Between(Vector(0, 0, 0), Event Player.freecam_vel) < 0.080);
				Event Player.freecam_vel = Vector(0, 0, 0);
			Else;
				Event Player.freecam_vel -= 0.060 * Event Player.freecam_vel;
			End;
		End;
		Event Player.freecam_freeeye += 0.250 * Event Player.freecam_vel;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("freecam locked")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.freecam_bool == True;
		Event Player.poslock_bool == True;
	}

	actions
	{
		Event Player.freecam_prevdir = Facing Direction Of(Event Player);
		Set Facing(Event Player, Event Player.pFacingDir, To World);
	}
}

rule("freecam unlock")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.freecam_bool == True;
		Event Player.poslock_bool != True;
	}

	actions
	{
		Set Facing(Event Player, Event Player.freecam_prevdir, To World);
	}
}

rule("freecam on")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.freecam_bool == True;
	}

	actions
	{
		Event Player.freecam_bool = True;
		Event Player.freecam_prevdir = Facing Direction Of(Event Player);
		Set Facing(Event Player, Event Player.pFacingDir, To World);
		Event Player.freecam_freeeye = Eye Position(Event Player);
		Start Camera(Event Player, Update Every Frame(Event Player.freecam_freeeye), Update Every Frame(
			Event Player.freecam_freeeye + 50 * (Event Player.poslock_bool ? Event Player.freecam_prevdir : Facing Direction Of(
			Event Player))), 1000);
	}
}

rule("freecam off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.freecam_bool == False;
	}

	actions
	{
		Event Player.freecam_bool = False;
		Stop Camera(Event Player);
	}
}

rule("McCree: HIGH NOON")
{
	event
	{
		Ongoing - Each Player;
		All;
		Cassidy;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.tumbleweed_highnoon_swag = True;
	}
}

rule("McCree: NOT HIGH NOON")
{
	event
	{
		Ongoing - Each Player;
		All;
		Cassidy;
	}

	conditions
	{
		Is Using Ultimate(Event Player) != True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
		Event Player.tumbleweed_highnoon_swag = False;
	}
}

rule("Implement automatic aiming")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.isAimEnabled == True;
	}

	actions
	{
		"Vertical line, 3m away "
		Create Beam Effect(Event Player, Brigitte Flail Chain Beam, Eye Position(Event Player) + Vector(3 * Sine From Degrees(
			Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player), Event Player.aimTargetPos))), 70,
			3 * Cosine From Degrees(Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player),
			Event Player.aimTargetPos)))), Eye Position(Event Player) + Vector(3 * Sine From Degrees(Horizontal Angle From Direction(
			Direction Towards(Eye Position(Event Player), Event Player.aimTargetPos))), -40, 3 * Cosine From Degrees(
			Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player), Event Player.aimTargetPos)))), Color(
			Team 2), Visible To Position and Radius);
		Chase Player Variable At Rate(Event Player, aim_indicatorPos, Eye Position(Event Player) + Vector(3 * Sine From Degrees(
			Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player), Event Player.aimTargetPos))),
			-3 * Tangent From Degrees(Vertical Facing Angle Of(Event Player)), 3 * Cosine From Degrees(Horizontal Angle From Direction(
			Direction Towards(Eye Position(Event Player), Event Player.aimTargetPos)))), 100, Destination and Rate);
		Chase Player Variable At Rate(Event Player, aim_distToIndicator, Distance Between(Eye Position(Event Player),
			Event Player.aim_indicatorPos), 100, Destination and Rate);
		Create Effect(Event Player, Sphere, Distance Between(Event Player.proj_predict_land_pos, Event Player.aimTargetPos)
			< 1.500 ? Color(Rose) : Color(White), Event Player.aim_indicatorPos, Event Player.aim_distToIndicator < 7 ? 0.100 : (
			Event Player.aim_distToIndicator < 14 ? 0.200 : 1), Visible To Position Radius and Color);
	}
}

rule("Sub: init_autoaim")
{
	event
	{
		Subroutine;
		init_autoaim;
	}

	actions
	{
		Event Player.aim_indicatorPos = Vector(0, 0, 0);
		Event Player.aimTargetPos = Vector(0, 0, 0);
		Event Player.aim_distToIndicator = 0;
		Create Effect(Event Player.isAimEnabled ? Event Player : Null, Sphere, Color(Black), Event Player.aimTargetPos, 1,
			Visible To Position and Radius);
		Create Effect(Event Player.isAimEnabled ? Event Player : Null, Ring, Color(Black), Event Player.aimTargetPos, 1,
			Visible To Position and Radius);
	}
}


rule("[sub] load heroData")
{
	event
	{
		Subroutine;
		initHeroData;
	}

	actions
	{
		Global.heroList = Array(Hero(Ana), Hero(Junkrat), Hero(Baptiste), Hero(Orisa), Hero(Zarya), Hero(Sombra), Hero(Ashe), Hero(Tracer),
			Hero(Cassidy), Hero(Mei), Hero(Torbjörn), Hero(Hanzo), Hero(Sigma), Hero(Widowmaker));
		Global.heroData = Array();
		"Ana"
		Global.heroData[0] = Array(Array(Null, Null, Null, Null, Array(-9.840, 30, 0, 7, 0, 0, 0.350, False)), 4, Array(4, 0, 0), False);
		"Junkrat"
		Global.heroData[1] = Array(Array(Array(-12.350, 25, 0.075, 7, 0, 0, 0.100, False), Null, Null, Array(-20.300, 25, 0.090, 7, 0,
			0.136, 0.250, False), Array(-20.200, 10, 0.095, 7, 0, 0, 0.250, False)), 0, Array(2, 3, 0), True);
		"Baptiste"
		Global.heroData[2] = Array(Array(Null, Array(-20.100, 60, 0.007, 7, 0, 0, 0.100, False), Null, Null, Array(-20.100, 60, 0.007, 7,
			0, 0, 0.100, False)), 1, Array(3, 0, 6.500), True);
		"Orisa"
		Global.heroData[3] = Array(Array(Null, Null, Null, Null, Array(-9.840, 25, 0, 7, 0, 0.128, 0.400, False)), 4, Array(0, 0, 0),
			True);
		"Zarya"
		Global.heroData[4] = Array(Array(Null, Array(-9.840, 25, 0.100, 7, 0, 0, 0.500, False), Array(-9.840, 25, 0.100, 7, 0, 0, 0.500,
			False), Null, Null), 1, Array(2.500, 6, 0), False);
		"Sombra"
		Global.heroData[5] = Array(Array(Null, Null, Null, Null, Array(-20.200, 25, 0.090, 5, 0, 0.096, 0.200, False)), 4, Array(15, 0, 0),
			True);
		"Ashe"
		Global.heroData[6] = Array(Array(Null, Null, Null, Null, Array(-8.030, 25, 0.070, 7, 0, 0.140, 0.400, False)), 4, Array(5, 0, 0),
			True);
		"Tracer"
		Global.heroData[7] = Array(Array(Null, Null, Array(-30.800, 15, 0.190, 2, 0, 0.144, 0.150, False), Null, Null), 2, Array(5, 0, 0),
			False);
		"Cassidy"
		Global.heroData[8] = Array(Array(Null, Null, Array(-10, 4.200, 0.577, 4, 0, 0, 0.300, False), Null, Array(-9.840, 30, 0, 0.233, 0,
			0, 0.100, False)), 4, Array(3, 0, 0), False);
		"Mei"
		Global.heroData[9] = Array(Array(Null, Null, Array(-9.900, 20, 0.090, 7, 0, 0.484, 0.600, False), Null, Null), 2, Array(10, 0, 0),
			False);
		"Torbjörn"
		Global.heroData[10] = Array(Array(Array(-9.810, 70, 0.015, 15, 0, 0, 0.100, True), Null, Array(-30.050, 40, 0, 5, 0, 0, 0.100,
			True), Array(-20, 17, 0, 4, 0, 0.048, 0.100, True), Null), 0, Array(2.500, 40, 0), True);
		"Hanzo"
		Global.heroData[11] = Array(Array(Array(-9.815, 110, 0, 15, 0, 0, 0.032, True), Null, Null, Null, Array(-9.815, 110, 0, 15, 0, 0,
			0.032, True)), 0, Array(0, 9, 0), False);
		"Sigma"
		Global.heroData[12] = Array(Array(Array(-5.954, 49.700, 0, 0.429, 0, 0, 0.048, False), Null, Null, Null, Array(-18.350, 37.400,
			0.100, 6, 0, 0.640, 0.256, False)), 4, Array(2.500, 3, 0), True);
		"Widowmaker"
		Global.heroData[13] = Array(Array(Null, Null, Null, Null, Array(-9.840, 20, 0, 7, 0, 0.192, 0.160, False)), 4, Array(3, 0, 0),
			True);
		Global.data = Array(Global.heroList, Global.heroData);
	}
}
